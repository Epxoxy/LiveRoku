<Window x:Class="LiveRoku.Notifications.MessageFlowBox"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
        xmlns:local="clr-namespace:LiveRoku.Notifications"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        WindowStyle="None"
        ResizeMode="NoResize"
        Background="{x:Null}" 
        AllowsTransparency="True" Height="0" Width="0">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="boolToVisibility"/>


        <SolidColorBrush x:Key="f4Brush" Color="#f4f4f4" />
        <Color x:Key="Status.Yellow.Color" A="255" R="255" G="138" B="101" />
        <Color x:Key="Status.Blue.Color" A="223" R="3" G="169" B="244" />
        <Style x:Key="NormalPopupStyle" TargetType="{x:Type Popup}">
            <Setter Property="StaysOpen" Value="True"/>
            <Setter Property="AllowsTransparency" Value="True" />
        </Style>
        <Style x:Key="AlignCenter" TargetType="{x:Type FrameworkElement}">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <Style x:Key="ScrollItemsControlStyle" TargetType="{x:Type ItemsControl}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <Border Background="{TemplateBinding Background}">
                            <ScrollViewer VerticalScrollBarVisibility="Hidden">
                                <ItemsPresenter>
                                </ItemsPresenter>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="NormalScrollItemsControlStyle" TargetType="{x:Type ItemsControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <ScrollViewer VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter>
                                </ItemsPresenter>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="NormalButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Padding" Value="0" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#region ********* ToggleSwitch **********-->

        <Color x:Key="ToggleSwitch.Checked.InnderBorder.Background" A="255" R="137" G="175" B="237" />
        <Color x:Key="ToggleSwitch.Checked.InnerEllipse.Fill" A="255" R="33" G="109" B="234" />
        <Color x:Key="ToggleSwitch.Unchecked.InnderBorder.Background" A="255" R="120" G="120" B="120" />
        <Color x:Key="ToggleSwitch.Unchecked.InnerEllipse.Fill" A="255" R="255" G="255" B="255" />
        <SolidColorBrush x:Key="ToggleSwitch.InnderBorder.Background" Color="{StaticResource ToggleSwitch.Unchecked.InnderBorder.Background}" />
        <SolidColorBrush x:Key="ToggleSwitch.InnerEllipse.Fill" Color="{StaticResource ToggleSwitch.Unchecked.InnerEllipse.Fill}" />

        <Style x:Key="ToggleSwitchControlStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Padding" Value="4" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="innerEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="8">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="innerEllipse" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
                                            To="{StaticResource ToggleSwitch.Checked.InnerEllipse.Fill}"></ColorAnimation>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="innerBorder"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="{StaticResource ToggleSwitch.Checked.InnderBorder.Background}"></ColorAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="innerEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-8">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <CubicEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <!--216DEA-->
                                            <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="innerEllipse" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" 
                                            To="{StaticResource ToggleSwitch.Unchecked.InnerEllipse.Fill}"></ColorAnimation>
                                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="innerBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                            To="{StaticResource ToggleSwitch.Unchecked.InnderBorder.Background}"></ColorAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid Margin="{TemplateBinding Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="40"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentSource="{TemplateBinding Content}"></ContentPresenter>
                                <Border x:Name="innerBorder" SnapsToDevicePixels="True" UseLayoutRounding="True" Grid.Column="1" Margin="3,0,3,0" CornerRadius="8" Background="{StaticResource ToggleSwitch.InnderBorder.Background}" Height="16" Width="32" HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Ellipse x:Name="innerEllipse" Height="16" Width="16" Fill="{StaticResource ToggleSwitch.InnerEllipse.Fill}">
                                        <Ellipse.RenderTransform>
                                            <TranslateTransform X="-8" />
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Border>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Content" Value="{x:Null}">
                                <Setter Property="Grid.Column" TargetName="innerBorder" Value="0" />
                                <Setter Property="Grid.ColumnSpan" TargetName="innerBorder" Value="2" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->
    </Window.Resources>
    <Canvas>
        <Popup x:Name="popbox" IsHitTestVisible="False" Style="{StaticResource NormalPopupStyle}" Width="320">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="36"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Border CornerRadius="3" Background="#434342" MouseLeftButtonDown="dragMoveClick">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Button Visibility="Collapsed" Padding="6" Height="24" Width="24" Style="{StaticResource NormalButtonStyle}" Click="addClick">
                            <Viewbox Stretch="Uniform">
                                <Path Data="M0,5 L10,5 M5,0 L5,10" Stroke="White" StrokeThickness="1.5" StrokeLineJoin="Round"/>
                            </Viewbox>
                        </Button>
                        <Button Visibility="Collapsed" Padding="6" Height="24" Width="24" Style="{StaticResource NormalButtonStyle}" Click="removeClick">
                            <Viewbox Stretch="Uniform" Width="18">
                                <Line X1="0" X2="10" Y1="1" Y2="1" Stroke="White" Height="2"/>
                            </Viewbox>
                        </Button>
                        <StackPanel Orientation="Horizontal">
                            <Button Margin="4,2,0,0" Padding="8" Height="24" Width="24" Style="{StaticResource NormalButtonStyle}" Click="showHideOwnerClick">
                                <Viewbox>
                                    <Path Data="M0,0 L10,0 L10,10 L0,10z M0,5 L10,5" Stroke="White" StrokeThickness="2" StrokeEndLineCap="Round" StrokeStartLineCap="Round"/>
                                </Viewbox>
                            </Button>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <ToggleButton x:Name="recentToggle" Content="RECENT" Margin="7,0" Padding="0,0" FontWeight="SemiBold" Background="Transparent" BorderThickness="0">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="Cursor" Value="Hand" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border>
                                                            <ContentPresenter />
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Foreground" Value="White" />
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="False">
                                                                <Setter Property="Foreground" Value="LightGray" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <TextBlock Margin="6,0" >
                                    <Run Text="STATUS&#160;" Foreground="LightGray" FontWeight="SemiBold"/>
                                    <Run x:Name="statusEle" Text="OFF" Foreground="White" FontWeight="SemiBold"/>
                                </TextBlock>
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Grid.Column="1" Orientation="Horizontal">
                            <TextBlock x:Name="sizeTb" Text="0000.00M" Margin="4,0" VerticalAlignment="Center" Foreground="LightGray" FontWeight="SemiBold" />
                            <ToggleButton x:Name="flowToggle" Unchecked="disableFlowMessage" Checked="enableFlowMessage" IsChecked="True" Padding="0" Style="{StaticResource ToggleSwitchControlStyle}"/>
                            <Button Style="{StaticResource NormalButtonStyle}" Padding="5,0" Click="clearFlowMessage">
                                <Border x:Name="statusFill" Background="#FF03A9F4" BorderBrush="White" CornerRadius="6" Height="18" Width="32">
                                    <Border.Resources>
                                        <Storyboard x:Key="statusToBlue">
                                            <ColorAnimation Storyboard.TargetName="statusFill" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="{StaticResource Status.Blue.Color}" Duration="00:00:00"/>
                                        </Storyboard>
                                        <Storyboard x:Key="statusToYello">
                                            <ColorAnimation Storyboard.TargetName="statusFill" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" To="{StaticResource Status.Yellow.Color}" Duration="00:00:00" />
                                        </Storyboard>
                                    </Border.Resources>
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup>
                                            <VisualState x:Name="Blue" Storyboard="{StaticResource statusToBlue}" />
                                            <VisualState x:Name="Yellow" Storyboard="{StaticResource statusToYello}"/>
                                            <VisualState x:Name="Normal" Storyboard="{StaticResource statusToBlue}" />
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                    <Viewbox Stretch="Uniform" >
                                        <Label Content="{Binding Items.Count, ElementName=flowItems}" x:Name="countLb" Foreground="White" FontWeight="SemiBold" FontSize="29" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        </Label>
                                    </Viewbox>
                                </Border>
                            </Button>
                        </StackPanel>
                    </Grid>
                </Border>
                <ItemsControl x:Name="flowItems" Grid.Row="1"
                              VirtualizingPanel.ScrollUnit="Pixel"
                              VirtualizingPanel.CacheLength="0,60"
                              VirtualizingPanel.CacheLengthUnit="Page"
                              VirtualizingPanel.IsVirtualizing="True" 
                              ScrollViewer.CanContentScroll="True" 
                              VirtualizingStackPanel.VirtualizationMode="Recycling"
                              MaxHeight="280" VerticalAlignment="Top"
                              Visibility="{Binding IsChecked, ElementName=flowToggle, Converter={StaticResource boolToVisibility}, FallbackValue=Visible}"
                              Style="{StaticResource ScrollItemsControlStyle}"
                              IsHitTestVisible="False"
                              Padding="0,1,0,0">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid Height="40" Background="Transparent" IsHitTestVisible="False">
                                <Rectangle Fill="#af000000" RadiusX="3" RadiusY="3" Margin="0,1" IsHitTestVisible="False"/>
                                <Viewbox Stretch="Uniform" StretchDirection="DownOnly" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,1" IsHitTestVisible="False">
                                    <TextBlock Padding="7,0" IsHitTestVisible="False">
                                        <Run Text="{Binding Tag, Mode=OneWay, StringFormat='{}{0}\: '}" Foreground="#a8def1"/>
                                        <Run Text="{Binding Content, Mode=OneWay}" Foreground="White"/>
                                    </TextBlock>
                                </Viewbox>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
                <ItemsControl x:Name="recentItems" Grid.Row="1"
                              VirtualizingPanel.ScrollUnit="Pixel"
                              VirtualizingPanel.IsVirtualizing="True" 
                              ScrollViewer.CanContentScroll="True" 
                              VirtualizingStackPanel.VirtualizationMode="Recycling"
                              Visibility="{Binding IsChecked, ElementName=recentToggle, Converter={StaticResource boolToVisibility}}"
                              MaxHeight="280" MinHeight="20" 
                              VerticalAlignment="Top"
                              BorderThickness="1,0,1,1"
                              BorderBrush="LightGray"
                              Background="#FFF4F4F4"
                              Style="{StaticResource NormalScrollItemsControlStyle}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Border BorderBrush="#ffe4e4e4" BorderThickness="0,0,0,1" SnapsToDevicePixels="True">
                                <local:SelectableTextBlock Margin="7,0" Padding="0,6" TextWrapping="WrapWithOverflow">
                                    <Run Text="{Binding Extra, Mode=OneWay, StringFormat='{}{0}&#x000a;'}" Foreground="DimGray"/>
                                    <Run Text="{Binding Tag, Mode=OneWay, StringFormat='{}{0}\: '}" Foreground="#1a0dab"/>
                                    <Run Text="{Binding Content, Mode=OneWay}"/>
                                </local:SelectableTextBlock>
                            </Border>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </Grid>
        </Popup>
    </Canvas>
</Window>
